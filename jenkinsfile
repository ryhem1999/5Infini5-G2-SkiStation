pipeline {
    agent any

    stages {
        stage('Getting project from Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/rihemchagour-G2-SkiStation']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/ryhem1999/5Infini5-G2-SkiStation.git']]])
            }
        }

        stage('Cleaning the project') {
            steps {
                sh "mvn -B -DskipTests clean"
            }
        }

        stage('Artifact Construction') {
            steps {
                sh "mvn -B -DskipTests package"
            }
        }

        stage('Unit Tests') {
            steps {
                sh "mvn test"
            }
        }

        stage('Code Quality Check via SonarQube') {
            steps {
                sh "mvn clean verify sonar:sonar -Dsonar.projectKey=skier -Dsonar.host.url=http://172.10.0.140:9000 -Dsonar.login=6f70be821f0fbf77ebf37416403f05771f71b5cc"
            }
        }

        stage('Publish to Nexus') {
            steps {
                sh 'mvn deploy'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Install Docker Compose
                    sh 'sudo apt-get install -y docker-compose'

                    // Build the Docker image from the Dockerfile
                    sh 'docker build -t rihemchagour/backend:latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub and push the Docker image
                    sh 'echo "r11031999" | docker login --username "rihem05" --password-stdin'
                    sh 'docker push rihemchagour/backend:latest'
                }
            }
        }

        stage('Docker Compose') {
            steps {
                script {
                    // Deploy the application using Docker Compose
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup: Stop the services after the job completes
                sh 'docker-compose down'
            }
        }
    }
}
